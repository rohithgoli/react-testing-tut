# Keyboard Interactions

    + Utility API
        type()
        clear() - to easily clear an editable element

            eg: 
                test('clear', async () => {
                    render(<textarea defaultValue="Hello, World!" />)
                    await userEvent.clear(screen.getByRole('textbox))
                    expect(screen.getByRole('textbox)).toHaveValue('')
                })

        selectOptions() - to easily select and de-select elements in a select dropdown & listbox

            eg: a test that uses selectOptions() API to select multiple options in a multi-select dropdown
                
                test('selectOptions', async () => {
                    render(
                        <select multiple>
                            <option value='1'>A</option>
                            <option value='2'>B</option>
                            <option value='3'>C</option>
                        </select>
                    )
                    await userEvent.selectOptions(screen.getByRole('listbox'), ['1', 'C'])
                    expect(screen.getByRole('option', {name: 'A'}).selected).toBe(true)
                    expect(screen.getByRole('option', {name: 'B'}).selected).toBe(false)
                    expect(screen.getByRole('option', {name: 'C'}).selected).toBe(true)
                })

        deselectOptions()

            eg:

                test('deselectOptions', () => {
                    render(
                        <select multiple>
                            <option value="1">A</option>
                            <option value='2' selected>
                                B 
                            </option>
                            <option value='3'>C</option>
                        </select>
                    )
                    await userEvent.deselectOptions(screen.getByRole('listbox'), '2')
                    expect(screen.getByText('B').selected).toBe(false)
                })

        upload() --> which is used to change the file input as of user clicked it and selected files in resulting file upload dialog

            eg:

                test('upload file', async () => {
                    render(
                        <div>
                            <label htmlFor="file-uploader">Upload file:</label>
                            <input id="file-uploader" type="file" />
                        </div>
                    )
                    const file = new File(['hello'], 'hello.png', {type: 'image/png'})
                    const input = screen.getByLabelText(/upload file/i)
                    await userEvent.upload(input, file)
                    expect(input.files[0]).toBe(file)
                    expect(input.files.item(0)).toBe(file)
                    expect(input.files).toHaveLength(1)
                })



    + Convenience API
        tab()

    + Clipboard APIs
        copy()
        cut()
        paste()

    + Keyboard APIs --> to simulate key presses