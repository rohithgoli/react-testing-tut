# React Testing library

# What to test in a react project ?
    + Test component renders
    + Test component renders with props
    + Test component renders in different states
    + Test component reacts to events

# What not to test ?
    + Implementation details --> Test behaviour not how it is implemented
    + Third party code --> Need not to test third party code
    + Code that is not important from a user point of view --> No need to test a utility function which 
        provides date in certain format rather test whether date is rendered in appropriate format
    

# RTL Queries

    Every test we write generally involves the following basic steps
    1. Render the component
    2. Find an element rendered by the component
    3. Assert against the element found in step 2 which will pass or fail the test
    
    To render the component, we use the render method from RTL

    For assertion, we use expect passing in a value and combine it with a matcher function
        from jest or jest-dom

    Helping us find the element is RTL responsibility & core api that RTL provides is to help us
    easily find an element rendered by the component --> RTL Queries

    + Queries are the methods that RTL provides to find elements on the page
    + To find a single element on the page, we have
        getBy..
        queryBy..
        findBy..
    + To find multiple elements on the page, we have
        getAllBy..
        queryAllBy..
        findAllBy..

    The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally TestId


# getBy.. queries

    + getBy.. class of queries return the matching node for a query, and
        throw a descriptive error if no elements match or
        if more than one match is found.

    + The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue,
        AltText, Title and finally TestId

    ****** getByRole ******

    + getByRole queries for elements with the given role
        + Role --> refers to the ARIA (Accessible Rich Internet Application) role which provides
            semantic meaning to content to ensure people using assistive technologies are able to
            use them 

        + By default, many semantic elements in HTML have a role
            Button element has a button role, 
            anchor element has a link role, 
            h1 to h6 elements have a heading role,
            checkboxes have a checkbox role,
            radio buttons have a radio role and so on

        + If we are working with elements that do not have a default role or
            if we want to specify a different role, the role attribute can be used to add the desired role.

            eg: To use an anchor element as a button in the navbar, you can add role='button'

        + How do we know the role for each element ?
            testing-library.com/docs/ --> Core API --> queries --> ByRole --> a table of HTML elements with their default and desired roles


    + getByRole options

        + getByRole method provides some options which we can use to tweak the querying logic

        + How do we resolve the issue where we have multiple elements that have the same role ?

            "name" --> The accessible name is for simple cases equal to
            1. the label of a form element
            2. the text content of a button or 
            3. the value of the aria-label attribute

            "level" --> applicable when dealing with headings

            "hidden"
            "selected"
            "checked"
            "pressed"

    + getByRole must be the top preference among Queries



    ****** getByLabelText ******

    + getByLabelText will search for the label that matches the given text, then find the 
        element associated with that label
    + options for getByLabelText
        eg: two elements have same label, in such case we pass options object with selector key whose value is 
            html element


    ****** getByPlaceholderText *****

    + getByPlaceholderText will search for all elements with a placeholder attribute and find one that matches the given text
    